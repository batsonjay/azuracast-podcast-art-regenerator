/**
 * Initialization service for setting up configuration
 * Copyright (c) JAB Ventures, Inc., 2025
 * Licensed under GPL v2
 */

const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

class InitializationService {
  constructor(apiClient, logger) {
    this.apiClient = apiClient;
    this.logger = logger;
    this.envPath = path.join(process.cwd(), '.env');
  }

  /**
   * Prompt user for input
   * @param {string} question - Question to ask
   * @param {string} defaultValue - Default value if user presses enter
   * @returns {Promise<string>} User input
   */
  async prompt(question, defaultValue = '') {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    return new Promise((resolve) => {
      const displayQuestion = defaultValue 
        ? `${question} (default: ${defaultValue}): `
        : `${question}: `;
      
      rl.question(displayQuestion, (answer) => {
        rl.close();
        resolve(answer.trim() || defaultValue);
      });
    });
  }

  /**
   * Search for podcasts by name
   * @param {string} stationId - Station ID
   * @param {string} searchTerm - Podcast name to search for
   * @returns {Promise<Array>} Array of matching podcasts
   */
  async searchPodcasts(stationId, searchTerm) {
    try {
      const response = await this.apiClient.makeRequest(`/station/${stationId}/podcasts`);
      
      if (!response.data || !Array.isArray(response.data)) {
        return [];
      }

      // Filter podcasts by name (case-insensitive)
      return response.data.filter(podcast => 
        podcast.title && podcast.title.toLowerCase().includes(searchTerm.toLowerCase())
      );
    } catch (error) {
      this.logger.error('Failed to search podcasts:', error.message);
      return [];
    }
  }

  /**
   * Get station information
   * @param {string} stationId - Station ID
   * @returns {Promise<Object|null>} Station information
   */
  async getStationInfo(stationId) {
    try {
      const response = await this.apiClient.makeRequest(`/station/${stationId}`);
      return response.data;
    } catch (error) {
      this.logger.error('Failed to get station info:', error.message);
      return null;
    }
  }

  /**
   * Write environment configuration to .env file
   * @param {Object} config - Configuration object
   */
  async writeEnvFile(config) {
    const envContent = [
      '# AzuraCast API Configuration',
      '# Generated by podcast-art-regenerator initialization',
      '',
      `AZURACAST_URL=${config.azuracastUrl}`,
      `API_KEY=${config.apiKey}`,
      `STATION_ID=${config.stationId}`,
      `PODCAST_ID=${config.podcastId}`,
      `DEFAULT_BATCH_SIZE=${config.defaultBatchSize || 50}`,
      ''
    ].join('\n');

    await fs.writeFile(this.envPath, envContent, 'utf8');
  }

  /**
   * Run the initialization process
   */
  async initialize() {
    this.logger.info('üöÄ Podcast Art Regenerator - Initial Setup');
    this.logger.info('This will help you configure the tool for your AzuraCast instance.');
    this.logger.separator();

    try {
      // Check if .env already exists
      try {
        await fs.access(this.envPath);
        const overwrite = await this.prompt('Configuration file (.env) already exists. Overwrite? (y/n)', 'n');
        if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
          this.logger.info('Initialization cancelled.');
          return;
        }
      } catch (error) {
        // File doesn't exist, continue
      }

      // Step 1: Get AzuraCast URL
      this.logger.info('üì° Step 1: AzuraCast Instance Configuration');
      const azuracastUrl = await this.prompt(
        'Enter your AzuraCast instance URL (e.g., https://radio.example.com)',
        ''
      );

      if (!azuracastUrl) {
        throw new Error('AzuraCast URL is required');
      }

      // Validate URL format
      try {
        new URL(azuracastUrl);
      } catch (error) {
        throw new Error('Invalid URL format. Please include http:// or https://');
      }

      // Step 2: Get API Key
      this.logger.info('\nüîë Step 2: API Key Configuration');
      this.logger.info('You can find your API key in your AzuraCast user profile.');
      this.logger.info('Documentation: https://www.azuracast.com/docs/developers/apis/');
      
      const apiKey = await this.prompt('Enter your AzuraCast API key', '');
      
      if (!apiKey) {
        throw new Error('API key is required');
      }

      // Step 3: Test connection and get station
      this.logger.info('\nüîå Step 3: Testing API Connection...');
      
      // Temporarily set up API client with provided credentials
      const originalBaseUrl = this.apiClient.config.api.baseUrl;
      const originalApiKey = this.apiClient.config.api.key;
      
      this.apiClient.config.api.baseUrl = `${azuracastUrl}/api`;
      this.apiClient.config.api.key = apiKey;

      // Test connection
      const connectionTest = await this.apiClient.testConnection();
      if (!connectionTest) {
        throw new Error('Failed to connect to AzuraCast API. Please check your URL and API key.');
      }

      this.logger.success('‚úÖ API connection successful!');

      // Step 4: Get stations
      this.logger.info('\nüè¢ Step 4: Station Selection');
      
      try {
        const stationsResponse = await this.apiClient.makeRequest('/stations');
        const stations = stationsResponse.data;

        if (!stations || stations.length === 0) {
          throw new Error('No stations found in your AzuraCast instance');
        }

        this.logger.info('Available stations:');
        stations.forEach((station, index) => {
          this.logger.info(`  ${index + 1}. ${station.name} (ID: ${station.id})`);
        });

        let stationId;
        if (stations.length === 1) {
          stationId = stations[0].id;
          this.logger.info(`\nUsing station: ${stations[0].name} (ID: ${stationId})`);
        } else {
          const stationChoice = await this.prompt(
            `\nSelect station (1-${stations.length})`,
            '1'
          );
          
          const stationIndex = parseInt(stationChoice) - 1;
          if (stationIndex < 0 || stationIndex >= stations.length) {
            throw new Error('Invalid station selection');
          }
          
          stationId = stations[stationIndex].id;
          this.logger.info(`Selected station: ${stations[stationIndex].name} (ID: ${stationId})`);
        }

        // Step 5: Search for podcast
        this.logger.info('\nüéôÔ∏è  Step 5: Podcast Selection');
        
        const podcastName = await this.prompt(
          'Enter podcast name to search for',
          ''
        );

        if (!podcastName) {
          throw new Error('Podcast name is required');
        }

        this.logger.info(`Searching for podcasts containing "${podcastName}"...`);
        const matchingPodcasts = await this.searchPodcasts(stationId, podcastName);

        if (matchingPodcasts.length === 0) {
          throw new Error(`No podcasts found containing "${podcastName}"`);
        }

        this.logger.info('Found podcasts:');
        matchingPodcasts.forEach((podcast, index) => {
          this.logger.info(`  ${index + 1}. ${podcast.title} (ID: ${podcast.id})`);
        });

        let podcastId;
        if (matchingPodcasts.length === 1) {
          podcastId = matchingPodcasts[0].id;
          this.logger.info(`\nUsing podcast: ${matchingPodcasts[0].title} (ID: ${podcastId})`);
        } else {
          const podcastChoice = await this.prompt(
            `\nSelect podcast (1-${matchingPodcasts.length})`,
            '1'
          );
          
          const podcastIndex = parseInt(podcastChoice) - 1;
          if (podcastIndex < 0 || podcastIndex >= matchingPodcasts.length) {
            throw new Error('Invalid podcast selection');
          }
          
          podcastId = matchingPodcasts[podcastIndex].id;
          this.logger.info(`Selected podcast: ${matchingPodcasts[podcastIndex].title} (ID: ${podcastId})`);
        }

        // Step 6: Optional settings
        this.logger.info('\n‚öôÔ∏è  Step 6: Processing Settings');
        const defaultBatchSize = await this.prompt(
          'Default batch size for processing episodes',
          '50'
        );

        // Step 7: Save configuration
        this.logger.info('\nüíæ Step 7: Saving Configuration...');
        
        const config = {
          azuracastUrl: azuracastUrl.replace(/\/$/, ''), // Remove trailing slash
          apiKey,
          stationId,
          podcastId,
          defaultBatchSize: parseInt(defaultBatchSize) || 50
        };

        await this.writeEnvFile(config);

        // Step 8: Show success and next steps
        this.logger.separator();
        this.logger.success('üéâ Configuration saved successfully!');
        this.logger.info('\nConfiguration written to .env file');
        this.logger.info('\nüìã Next steps:');
        this.logger.info('1. Review the generated .env file');
        this.logger.info('2. Run the tool to start processing episodes:');
        this.logger.info('');
        this.logger.info('   # Test with a small batch first:');
        this.logger.info('   npm run start -- --batch-size 5 --dry-run');
        this.logger.info('');
        this.logger.info('   # Start actual processing:');
        this.logger.info('   npm run start');
        this.logger.info('');
        this.logger.info('   # Search for specific episode:');
        this.logger.info('   npm run start -- --search-title "episode name"');
        this.logger.info('');
        this.logger.info('üìñ For more options, run: npm run start -- --help');

      } catch (error) {
        // Restore original API client config
        this.apiClient.config.api.baseUrl = originalBaseUrl;
        this.apiClient.config.api.key = originalApiKey;
        throw error;
      }

      // Restore original API client config
      this.apiClient.config.api.baseUrl = originalBaseUrl;
      this.apiClient.config.api.key = originalApiKey;

    } catch (error) {
      this.logger.error('Initialization failed:', error.message);
      this.logger.info('\nTroubleshooting:');
      this.logger.info('‚Ä¢ Verify your AzuraCast URL is correct and accessible');
      this.logger.info('‚Ä¢ Check that your API key is valid and has proper permissions');
      this.logger.info('‚Ä¢ Ensure the podcast exists and is accessible');
      this.logger.info('‚Ä¢ See documentation: https://www.azuracast.com/docs/developers/apis/');
      process.exit(1);
    }
  }
}

module.exports = InitializationService;
